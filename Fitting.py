import numpy as np
from scipy.optimize import curve_fit
import matplotlib.pyplot as plt

def sigmoid_func(x, L, k, x0, C):
    return L / (1 + np.exp(k * (x - x0))) + C

x = np.arange(28)

# Similarity = 0.2
y_2 = np.array([
    0.31798617, 0.317662009, 0.31541813, 0.314100583, 0.309226249, 0.299428446,
    0.289332558, 0.283118864, 0.269125306, 0.257785028, 0.245970662, 0.234139791,
    0.226129074, 0.214204782, 0.199165753, 0.191351838, 0.178313038, 0.169020321,
    0.152827609, 0.135744512, 0.118189764, 0.106681915, 0.101041994, 0.095403732,
    0.092314272, 0.089854422, 0.089195074, 0.089831973
])

# Similarity = 0.3
y_3 = np.array([
    0.318491766, 0.318413859, 0.315389702, 0.313205729, 0.308389533, 0.29970106,
    0.290529257, 0.283928956, 0.271805611, 0.261066175, 0.250048007, 0.239415815,
    0.230879751, 0.219910467, 0.20623656, 0.198776716, 0.187082752, 0.177748918,
    0.163038746, 0.145690371, 0.130262354, 0.119182021, 0.111643982, 0.106946556,
    0.104223913, 0.101877058, 0.101518395, 0.101401375
])

# Similarity = 0.4
y_4 = np.array([
    0.315797679, 0.315403511, 0.311486526, 0.309529761, 0.304601868, 0.29842311,
    0.291337115, 0.28376892, 0.273645052, 0.265472446, 0.257238575, 0.247026526,
    0.238328557, 0.229551236, 0.220753571, 0.210629248, 0.20134516, 0.190908862,
    0.178895409, 0.165738041, 0.154716265, 0.146452127, 0.139376981, 0.134657047,
    0.133241044, 0.130531413, 0.13126946, 0.130701454
])

# Similarity = 0.5
y_5 = np.array([
    0.316417247, 0.317143089, 0.312755928, 0.310054624, 0.305018289, 0.299633339,
    0.293128655, 0.28657301, 0.278878289, 0.268757693, 0.263220239, 0.254495978,
    0.243952813, 0.235885621, 0.228854404, 0.220835353, 0.214089289, 0.205209691,
    0.196359416, 0.186931957, 0.180382616, 0.173832111, 0.16875268, 0.165854638,
    0.165007842, 0.163830384, 0.163656365, 0.162913077
])

# Similarity = 0.6
y_6 = np.array([
    0.317163016, 0.318714404, 0.315158128, 0.312052224, 0.308071561, 0.303991757,
    0.297897863, 0.291819951, 0.285236854, 0.277058969, 0.272510426, 0.264127768,
    0.255752494, 0.248634116, 0.242421668, 0.234926458, 0.230653013, 0.2220098,
    0.214768706, 0.211130355, 0.207419856, 0.203676851, 0.202269191, 0.199227016,
    0.199220219, 0.198899314, 0.198171286, 0.198199726
])

# Similarity = 0.7
y_7 = np.array([
    0.317816004, 0.319966532, 0.319015073, 0.315415976, 0.312969079, 0.307178821,
    0.304484017, 0.298296432, 0.292886842, 0.287099712, 0.280436546, 0.274755101,
    0.266909539, 0.262284174, 0.257187393, 0.252022833, 0.24866295, 0.243754764,
    0.238509904, 0.236252183, 0.233607262, 0.232435114, 0.230700433, 0.227033693,
    0.226854703, 0.228418041, 0.226717176, 0.227843485
])

# Fitting
y = y_2
initial_guess = [0.1, 0.1, 0.1, 0.1]
params, covariance = curve_fit(sigmoid_func, x, y, p0=initial_guess, maxfev=1000000)
L, k, x0, C = params
y_fit = sigmoid_func(x, *params)

print(L, k ,x0, C)

# Get Fitting Function for Origin Drawing
x_new = np.arange(min(x), 27.01, 0.03)
y_new = sigmoid_func(x_new, L, k, x0, C)
y_new_str = ["{:.6f}".format(y) for y in y_new]
# for x_val, y_val in zip(x_new, y_new_str):
    # print(f"{x_val:.2f}, {y_val}")
    # print(f"{x_val:.2f}")
    # print(f"{y_val}")

# Plot
plt.scatter(x, y)
plt.plot(x, y_fit, 'r-', label='Fitted Curve')
plt.legend()
plt.xlabel('x')
plt.ylabel('y')
plt.show()

print(L, k ,x0, C)
